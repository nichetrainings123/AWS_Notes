# üì¶ IT Storage Overview

In **IT**, storage refers to the **technology, systems, and methods** used to save digital data (files, applications, databases, backups) so it can be retrieved and used later.

---

## üîπ Types of Storage

### 1. Primary Storage (Volatile)
- **Fast, temporary memory**  
- Example: **RAM (Random Access Memory)**  
- ‚ùå Loses data when power is off  

### 2. Secondary Storage (Non-Volatile)
- **Long-term data storage**  
- Examples: **HDDs, SSDs, Optical Discs, USB drives**  

### 3. Tertiary Storage
- Mainly for **backup/archival**  
- Example: **Tape drives, Blu-ray discs**

---

## üîπ Enterprise & Data Center Storage

### DAS (Direct Attached Storage)
- Storage directly attached to a server  
- Example: Internal HDD/SSD in your laptop  

### NAS (Network Attached Storage)
- Dedicated storage device connected to a network  
- Multiple users/computers access files over the network  

### SAN (Storage Area Network)
- **High-speed network** connecting servers with storage  
- Used for **databases, virtualization, large workloads**  

### Cloud Storage
- Data stored in **remote data centers** and accessed via the internet  
- Examples: **AWS S3, Google Drive, Azure Blob Storage**  

---

## üîπ Storage Architectures

### 1. File Storage
- Data stored as **files in a hierarchical structure** (folders/subfolders)  
- **Access:** Folder ‚Üí `file.txt`  
- **Use Cases:** Shared drives, content management, home directories  
- **Examples:** NAS, NFS, SMB/CIFS  
- ‚úÖ Good for: Simple file sharing, small/medium workloads  
- ‚ùå Not good for: High-performance databases  

---

### 2. Object Storage
- Data stored as **objects = data + metadata + unique ID**  
- Uses a **flat structure** (no folders)  
- **Access:** APIs/HTTP (e.g., GET/PUT requests)  
- **Use Cases:** Storing images, videos, backups, logs, big data  
- **Examples:** AWS S3, Azure Blob, GCP Storage, MinIO, OpenStack Swift  
- ‚úÖ Good for: Scalability, unstructured data, backups  
- ‚ùå Not good for: Transactional workloads (e.g., databases)  

---

### 3. Block Storage
- Data split into **fixed-size blocks** with unique addresses  
- OS assembles blocks into a file system  
- **Access:** Like a raw disk (`/dev/sda` in Linux)  
- **Use Cases:** Databases, VMs, transactional workloads  
- **Examples:** SAN, AWS EBS, Azure Managed Disks, GCP Persistent Disks  
- ‚úÖ Good for: High IOPS, low latency  

---

## üîπ Managed vs. Unmanaged Storage in AWS

### ‚úÖ Managed Storage
- **Definition:** AWS handles durability, patching, backups, scaling  
- **What you do:** Just create buckets/volumes/tables and use it  
- **Examples:**  
  - Amazon **S3** (Object)  
  - Amazon **EFS** (File)  
  - Amazon **FSx** (Windows/Lustre file storage)  
  - Amazon **RDS storage** (Block for DBs)  
- **Pros:**  
  - No infra management  
  - Built-in **HA (High Availability)** & durability  
  - Auto scaling (S3, EFS)  
- **Cons:**  
  - Less performance tuning control  
  - Higher cost (AWS manages for you)  

---

### ‚öôÔ∏è Unmanaged Storage
- **Definition:** You manage filesystem, scaling, replication, backup  
- **What you do:** Mount, format, configure RAID/replication manually  
- **Examples:**  
  - Amazon **EBS** (Elastic Block Store)  
  - **Instance Store** (Ephemeral storage on EC2 host)  
  - Self-managed **file servers on EC2** (NFS, Samba, etc.)  
- **Pros:**  
  - Full control (filesystem, caching, RAID, backup strategy)  
  - Can be cheaper at scale with optimization  
- **Cons:**  
  - You manage **scaling, snapshots, durability**  
  - If EC2/AZ goes down ‚Üí data risk unless replicated  

---

üìå This document gives a **complete overview of IT storage concepts, types, and architectures** with practical cloud examples (especially AWS).  
