<!-- README.md — VPC & Networking (GitHub-friendly HTML) -->

<h1>🔒 VPC & Networking Deep Dive</h1>

<p>
  <img src="https://img.shields.io/badge/AWS-Architecture-orange" alt="AWS"/>
  <img src="https://img.shields.io/badge/Network-Design-blue" alt="Network"/>
  <img src="https://img.shields.io/badge/Best%20Practices-✔️-green" alt="Best Practices"/>
</p>

<p>
  An expanded, practical and copy-ready explanation of VPC, CIDR, subnets, routing, security groups, NAT, and the traffic flow in the example topology.
</p>

<hr />

<!-- Quick links -->
<p><strong>Contents:</strong>
  <a href="#vpc">VPC</a> ·
  <a href="#cidr">CIDR</a> ·
  <a href="#subnet">Subnet</a> ·
  <a href="#igw">Internet Gateway</a> ·
  <a href="#nat">NAT</a> ·
  <a href="#route-table">Route Table</a> ·
  <a href="#security-group">Security Group</a> ·
  <a href="#nacl">NACL</a> ·
  <a href="#p2p-p2s">P2P / P2S</a> ·
  <a href="#elb">Load Balancer</a> ·
  <a href="#diagram">Diagram & Flow</a> ·
  <a href="#checklist">Checklist</a> ·
  <a href="#glossary">Glossary</a>
</p>

<hr />

<details>
  <summary id="vpc"><strong>1. VPC — what it <em>really</em> is</strong> 🔑</summary>
  <p><strong>Definition:</strong> A VPC (Virtual Private Cloud) is an AWS-managed, logically isolated virtual network where you launch AWS resources (EC2, RDS, ECS, etc.). Think of it as your own private datacenter inside AWS.</p>

  <ul>
    <li><strong>Key properties:</strong> CIDR block (e.g., <code>10.0.0.0/16</code>), spans AZs, contains subnets, route tables, and security controls.</li>
    <li><strong>Best practices:</strong> Use separate VPCs/accounts for <em>prod</em>, <em>staging</em>, and <em>dev</em>. Design for multi-AZ and least-privilege networking.</li>
    <li><strong>Example:</strong> VPC CIDR: <code>10.0.0.0/16</code></li>
  </ul>
</details>

<details>
  <summary id="cidr"><strong>2. CIDR — addressing & sizing</strong> 📐</summary>
  <p><strong>Format:</strong> <code>IP/prefix</code> e.g. <code>10.0.0.0/16</code>.</p>

  <ul>
    <li><code>/16</code> → 65,536 IPs (10.0.0.0–10.0.255.255)</li>
    <li><code>/24</code> → 256 IPs (10.0.1.0–10.0.1.255)</li>
    <li><strong>AWS detail:</strong> AWS reserves <strong>5 IPs</strong> per subnet (first 4 and last 1).</li>
    <li><strong>Design tip:</strong> Avoid overly large blocks and overlapping ranges if you plan VPNs/peering.</li>
  </ul>
</details>

<details>
  <summary id="subnet"><strong>3. Subnet — AZ-level slices</strong> 🗂️</summary>
  <p>Each subnet belongs to a single AZ.</p>

  <p><strong>Types:</strong></p>
  <ul>
    <li><strong>Public subnet</strong>: route to IGW, instances usually have public/elastic IPs.</li>
    <li><strong>Private subnet</strong>: no direct IGW; uses NAT for outbound internet access.</li>
  </ul>

  <p><strong>Example mapping:</strong> VPC <code>10.0.0.0/16</code> → public <code>10.0.1.0/24</code>, private <code>10.0.2.0/24</code>.</p>
</details>

<details>
  <summary id="igw"><strong>4. Internet Gateway (IGW)</strong> 🌐</summary>
  <p><strong>Purpose:</strong> Connects the VPC to the Internet. Requirements for public access:</p>
  <ol>
    <li>Route table entry: <code>0.0.0.0/0 → igw-...</code></li>
    <li>Instance with public (or Elastic) IP.</li>
    <li>Security Group / NACL allowing traffic.</li>
  </ol>
  <p><strong>Note:</strong> One IGW per VPC; attach it explicitly.</p>
</details>

<details>
  <summary id="nat"><strong>5. NAT — private instances reaching the internet</strong> 🔁</summary>
  <p><strong>NAT Gateway</strong> (recommended): AWS-managed, highly available per AZ (create one per AZ for HA). Requires an Elastic IP and is charged hourly + data processed.</p>

  <p><strong>NAT Instance</strong>: EC2-based, requires maintenance and HA design — use only if you need custom behavior.</p>

  <pre><code>Private EC2 → NAT Gateway (in Public Subnet) → IGW → Internet</code></pre>
</details>

<details>
  <summary id="route-table"><strong>6. Route Table — where traffic is directed</strong> 🧭</summary>
  <p>A route table contains rules mapping destination CIDRs to targets (local, IGW, NAT, VPC peering, TGW, endpoints).</p>

  <p><strong>Common entries:</strong></p>
  <ul>
    <li><code>10.0.0.0/16 → local</code> (auto)</li>
    <li>Public RT: <code>0.0.0.0/0 → igw-...</code></li>
    <li>Private RT: <code>0.0.0.0/0 → nat-...</code></li>
  </ul>
</details>

<details>
  <summary id="security-group"><strong>7. Security Group (SG) — instance-level firewall</strong> 🔐</summary>
  <p>Stateful, allow-only rules. Attach to ENIs or instances and edit at runtime.</p>

  <p><strong>Example Web SG:</strong></p>
  <pre><code>Inbound:
  - TCP 80,443 from 0.0.0.0/0
Outbound:
  - All (or restricted per policy)</code></pre>

  <p><strong>Recommendation:</strong> Lock SSH (<code>22</code>) to administrative IPs or use SSM Session Manager instead of public SSH.</p>
</details>

<details>
  <summary id="nacl"><strong>8. Network ACL (NACL) — subnet-level firewall</strong> 🚧</summary>
  <p>Stateless. Order-based rules; can explicitly allow or deny traffic. Use as an extra layer (e.g., emergency block or edge filtering).</p>

  <p><strong>Example:</strong></p>
  <pre><code>Inbound:
  - Rule 100: ALLOW TCP 80  from 0.0.0.0/0
  - Rule 110: DENY  TCP 22  from 0.0.0.0/0
Outbound:
  - (matching allow rules for return traffic)</code></pre>
</details>

<details>
  <summary id="p2p-p2s"><strong>9–10. P2P (Peering/DirectConnect) & P2S (Client VPN)</strong> 🔗</summary>
  <p><strong>VPC Peering:</strong> Connect 2 VPCs (not transitive). Good for one-to-one or few VPC connections.</p>
  <p><strong>Direct Connect:</strong> Dedicated physical link from on-prem → AWS for predictable bandwidth and lower latency.</p>
  <p><strong>Transit Gateway:</strong> Use for large-scale multi-VPC networks (supports transitive routing).</p>

  <p><strong>Client VPN / P2S</strong> — AWS Client VPN allows laptops and admins to connect securely to private resources without public IPs.</p>
</details>

<details>
  <summary id="elb"><strong>11. Load Balancer (ELB family)</strong> ⚖️</summary>
  <p><strong>ALB (Application LB):</strong> Layer 7, path & host-based routing, WebSocket and HTTP/2 support — ideal for microservices.</p>
  <p><strong>NLB (Network LB):</strong> Layer 4, ultra-low latency, high throughput — preserves client IPs.</p>
  <p><strong>CLB (Classic LB):</strong> Legacy; use only for legacy apps.</p>
</details>

<hr />

<h2 id="diagram">📈 Example topology & traffic flow</h2>

<pre><code>
                ┌──────────────────────────────┐
                │        AWS Region            │
                │   (Virtual Private Cloud)    │
                │  CIDR: 10.0.0.0/16           │
                └──────────────────────────────┘
                          │
         ┌────────────────┴────────────────┐
         │                                 │
 ┌───────────────┐                 ┌───────────────┐
 │ Public Subnet │ 10.0.1.0/24     │ Private Subnet│ 10.0.2.0/24
 │   (AZ-A)      │                 │   (AZ-A)      │
 └───────┬───────┘                 └───────┬───────┘
         │                                 │
  ┌──────▼─────┐                   ┌───────▼─────┐
  │  EC2 (Web) │                   │  EC2 (DB)   │
  │ Public IP  │                   │ Private IP  │
  └──────┬─────┘                   └───────┬─────┘
         │                                 │
   ┌─────▼─────┐                     ┌─────▼─────┐
   │   IGW     │                     │   NAT GW  │
   │ Internet  │                     │ Outbound  │
   └─────┬─────┘                     └─────┬─────┘
         │                                 │
 ┌───────▼────────┐                ┌───────▼────────┐
 │ Public RT      │                │ Private RT     │
 │----------------│                │----------------│
 │ Local:10.0.0.0 │                │ Local:10.0.0.0 │
 │ IGW: 0.0.0.0/0 │                │ NAT: 0.0.0.0/0 │
 └────────────────┘                └────────────────┘
</code></pre>

<p><strong>Flow walkthrough:</strong></p>
<ol>
  <li>Client → Internet → IGW (DNS resolves to ALB or EC2 public IP)</li>
  <li>IGW → Public RT → EC2 (Web) (instance must have a public IP & SG to allow HTTP/HTTPS)</li>
  <li>Web → DB via private IP (stays inside VPC)</li>
  <li>DB (private subnet) needs outbound access? → Private RT → NAT Gateway → IGW → Internet</li>
</ol>

<hr />

<h2 id="checklist">✅ Quick deployment checklist</h2>

<table>
  <thead>
    <tr><th>Step</th><th>Example/Notes</th></tr>
  </thead>
  <tbody>
    <tr><td>Choose VPC CIDR</td><td><code>10.10.0.0/16</code></td></tr>
    <tr><td>Create subnets per AZ</td><td>Public <code>10.10.1.0/24</code>, Private <code>10.10.2.0/24</code> (replicate per AZ)</td></tr>
    <tr><td>Create IGW & attach</td><td>One IGW per VPC</td></tr>
    <tr><td>Create NAT Gateway(s)</td><td>One per AZ for HA — requires EIP</td></tr>
    <tr><td>Create route tables</td><td>Public RT -> IGW; Private RT -> NAT GW</td></tr>
    <tr><td>Security Groups</td><td>ALB SG allow 80/443; Web SG allow from ALB; DB SG allow from Web SG only</td></tr>
    <tr><td>VPC endpoints</td><td>Add S3/DynamoDB endpoints to avoid internet egress</td></tr>
    <tr><td>Monitoring</td><td>Enable VPC Flow Logs + CloudWatch + CloudTrail</td></tr>
  </tbody>
</table>

<hr />

<h2 id="glossary">📚 Glossary</h2>
<table>
  <thead><tr><th>Term</th><th>Meaning</th></tr></thead>
  <tbody>
    <tr><td>ENI</td><td>Elastic Network Interface (virtual NIC)</td></tr>
    <tr><td>EIP</td><td>Elastic IP (public static IP)</td></tr>
    <tr><td>VGW</td><td>Virtual Private Gateway — used for VPN/Direct Connect</td></tr>
    <tr><td>Transit Gateway</td><td>Hub for connecting many VPCs & VPNs</td></tr>
  </tbody>
</table>

<hr />

<details>
  <summary><strong>Terraform & AWS CLI starter snippets</strong> 🛠️</summary>

  <p><strong>AWS CLI — create VPC and subnet (example)</strong></p>
  <pre><code>aws ec2 create-vpc --cidr-block 10.10.0.0/16
aws
